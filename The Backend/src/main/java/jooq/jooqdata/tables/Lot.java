/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Keys;
import jooqdata.Purchase;
import jooqdata.tables.records.LotRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lot extends TableImpl<LotRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>purchase.lot</code>
     */
    public static final Lot LOT = new Lot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LotRecord> getRecordType() {
        return LotRecord.class;
    }

    /**
     * The column <code>purchase.lot.lot_id</code>.
     */
    public final TableField<LotRecord, Integer> LOT_ID = createField(DSL.name("lot_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>purchase.lot.lot_name</code>.
     */
    public final TableField<LotRecord, String> LOT_NAME = createField(DSL.name("lot_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>purchase.lot.customer_code</code>.
     */
    public final TableField<LotRecord, String> CUSTOMER_CODE = createField(DSL.name("customer_code"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>purchase.lot.price</code>.
     */
    public final TableField<LotRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(15, 2).nullable(false), this, "");

    /**
     * The column <code>purchase.lot.currency_code</code>.
     */
    public final TableField<LotRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>purchase.lot.nds_rate</code>.
     */
    public final TableField<LotRecord, String> NDS_RATE = createField(DSL.name("nds_rate"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>purchase.lot.place_delivery</code>.
     */
    public final TableField<LotRecord, String> PLACE_DELIVERY = createField(DSL.name("place_delivery"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>purchase.lot.date_delivery</code>.
     */
    public final TableField<LotRecord, LocalDateTime> DATE_DELIVERY = createField(DSL.name("date_delivery"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Lot(Name alias, Table<LotRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lot(Name alias, Table<LotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>purchase.lot</code> table reference
     */
    public Lot(String alias) {
        this(DSL.name(alias), LOT);
    }

    /**
     * Create an aliased <code>purchase.lot</code> table reference
     */
    public Lot(Name alias) {
        this(alias, LOT);
    }

    /**
     * Create a <code>purchase.lot</code> table reference
     */
    public Lot() {
        this(DSL.name("lot"), null);
    }

    public <O extends Record> Lot(Table<O> child, ForeignKey<O, LotRecord> key) {
        super(child, key, LOT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Purchase.PURCHASE;
    }

    @Override
    public Identity<LotRecord, Integer> getIdentity() {
        return (Identity<LotRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LotRecord> getPrimaryKey() {
        return Keys.LOT_PKEY;
    }

    @Override
    public List<UniqueKey<LotRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_LOT_NAME);
    }

    @Override
    public List<ForeignKey<LotRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LOT__FK_CUSTOMER);
    }

    private transient Customer _customer;

    /**
     * Get the implicit join path to the <code>purchase.customer</code> table.
     */
    public Customer customer() {
        if (_customer == null)
            _customer = new Customer(this, Keys.LOT__FK_CUSTOMER);

        return _customer;
    }

    @Override
    public List<Check<LotRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("lot_currency_code_check"), "(((currency_code)::text = ANY ((ARRAY['RUB'::character varying, 'USD'::character varying, 'EUR'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("lot_nds_rate_check"), "(((nds_rate)::text = ANY ((ARRAY['Без НДС'::character varying, '18%'::character varying, '20%'::character varying])::text[])))", true)
        );
    }

    @Override
    public Lot as(String alias) {
        return new Lot(DSL.name(alias), this);
    }

    @Override
    public Lot as(Name alias) {
        return new Lot(alias, this);
    }

    @Override
    public Lot as(Table<?> alias) {
        return new Lot(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lot rename(String name) {
        return new Lot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lot rename(Name name) {
        return new Lot(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lot rename(Table<?> name) {
        return new Lot(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, BigDecimal, String, String, String, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super BigDecimal, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super BigDecimal, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
